{"version":3,"sources":["../node_modules/reactstrap/es/Table.js","1-3/pages/generator/Generator.js","1-3/pages/generator/preprocessing.js","../node_modules/reactstrap/es/Alert.js"],"names":["propTypes","className","PropTypes","string","cssModule","object","size","bordered","bool","borderless","striped","dark","hover","responsive","oneOfType","tag","tagPropType","responsiveTag","innerRef","func","Table","props","Tag","ResponsiveTag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","table","React","createElement","_extends","ref","responsiveClassName","defaultProps","examples","Generator","state","json","dangerouslySetInnerHTML","__html","this","id","txt","replaceAll","href","local_urls","Alert","color","path","mdiAlertRhombus","colSpan","rowSpan","mdiCheckCircle","mdiCircleHalf","style","mdiCloseCircle","mode","mdiAlertCircle","Component","children","node","closeClassName","closeAriaLabel","fade","isOpen","toggle","transition","shape","Fade","_objectSpread2","unmountOnExit","closeClasses","alertTransition","baseClass","timeout","in","role","type","onClick"],"mappings":"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","file":"static/js/25.cc975c29.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;","import React, { Component, Fragment } from 'react';\r\nimport { Alert, Table, Badge } from 'reactstrap';\r\nimport { JOFGENGenerator } from '../../lib';\r\nimport { codePreprocess } from './preprocessing';\r\nimport Icon from '@mdi/react';\r\nimport { mdiAlertRhombus, mdiCheckCircle, mdiCloseCircle, mdiCircleHalf, mdiAlertCircle } from '@mdi/js';\r\nimport { local_urls } from '../../urls';\r\n\r\nconst generatorProps = `JOFGENGenerator.propTypes = {\\n    onChange: PropTypes.func,\\n    isValid: PropTypes.func,\\n    \\n    <comment>// JSON object used for generating form</comment>\\n    json: PropTypes.array,\\n    value: PropTypes.object, <comment>// init form value</comment>\\n    \\n    <comment>// structure of returned value object</comment>\\n    mode: PropTypes.oneOf([\"tree\", \"linear\", \"linear_merge\"]),\\n    \\n    <comment>// this parameter is used only when mode is set to linear_merge</comment>\\n    sep: PropTypes.string,\\n    size: PropTypes.string,\\n    \\n    <comment>// parameters of generic id. Generic id is used when unique id is:\\n    // - not defined by user\\n    // - is lost\\n    // - is invalid</comment>\\n    jkey: PropTypes.shape({\\n        prefix: PropTypes.string.isRequired,\\n        sufix: PropTypes.string.isRequired\\n    }),\\n    sm: PropTypes.oneOf([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]),\\n    \\n    <comment>// this text and icon shows when json object is not valid</comment>\\n    fatal_error: PropTypes.shape({\\n        icon: PropTypes.any,\\n        text: PropTypes.string\\n    })\\n};`;\r\nconst examples = [\r\n    `<import>import</import> <classcmd>React</classcmd>, { <classcmd>Component</classcmd>, <classcmd>Fragment</classcmd> } from <path>'react'</path>;\\n<import>import</import> { <classcmd>JOFGENGenerator</classcmd> } from <path>'json-obj-form-generator'</path>;\\n<import>import</import> <path>'bootstrap/dist/css/bootstrap.css'</path>;\\n<import>import</import> <path>'json-obj-form-generator/dist/css/generator.css'</path>;\\n\\n<cmd>export default class</cmd> <classcmd>GeneratorExample1</classcmd> extends <classcmd>Component</classcmd> {\\n    <cmd>constructor</cmd>(<prm>props</prm>) {\\n        <cmd>super</cmd>(<prm>props</prm>);\\n        <cmd>this</cmd>.<prm>state</prm> = {\\n            json: [\\n                {\\n                    \"uid\":\"sections_package\",\\n                    \"design\":\"stack\",\\n                    \"type\":\"pack\",\\n                    \"sub\": [\\n                        {\\n                            \"uid\":\"sec1\",\\n                            \"name\":\"Unicorns\",\\n                            \"type\":\"sec\",\\n                            \"sub\": [\\n                                {\\n                                    \"uid\":\"favnames\",\\n                                    \"name\":\"Favorite unicorn names\",\\n                                    \"minLength\":1,\\n                                    \"type\":\"str_il\"\\n                                }\\n                            ]\\n                        },\\n                        {\\n                            \"uid\":\"sec2\",\\n                            \"name\":\"Dragons\",\\n                            \"type\":\"sec\",\\n                            \"sub\": [\\n                                {\\n                                    \"uid\":\"favdragoncolor\",\\n                                    \"name\":\"What's your favorite dragon color?\",\\n                                    \"type\":\"color\"\\n                                }\\n                            ]\\n                        }\\n                    ]\\n                },\\n                {\\n                    \"uid\":\"unic_old\",\\n                    \"name\":\"How old is your unicorn?\",\\n                    \"required\":true,\\n                    \"type\":\"int\"\\n                },\\n                {\\n                    \"uid\":\"unic_color\",\\n                    \"name\":\"What's the best color of unicorn?\",\\n                    \"tip\":\"Try to use this tip: https://youtu.be/5phx8eycHZ4\",\\n                    \"type\":\"color\"\\n                }\\n            ]\\n        };\\n    }\\n    \\n    <primpt>render</primpt>()\\n    {\\n        <ret>return</ret> <<classcmd>JOFGENGenerator</classcmd> json={this.state.json} />\\n    }\\n};\\n`\r\n]\r\n\r\n\r\nexport default class Generator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            json: [{ \"uid\": \"sections_package\", \"design\": \"stack\", \"type\": \"pack\", \"sub\": [{ \"uid\": \"sec1\", \"name\": \"Unicorns\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"favnames\", \"name\": \"Favorite unicorn names\", \"minLength\": 1, \"type\": \"str_il\" }] }, { \"uid\": \"sec2\", \"name\": \"Dragons\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"favdragoncolor\", \"name\": \"What's your favorite dragon color?\", \"type\": \"color\" }] }] }, { \"uid\": \"unic_old\", \"name\": \"How old is your unicorn?\", \"required\": true, \"type\": \"int\" }, { \"uid\": \"unic_color\", \"name\": \"What's the best color of unicorn?\", \"tip\": \"Try to use this tip: https://youtu.be/5phx8eycHZ4\", \"type\": \"color\" }]\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <section>\r\n                    <h2>\r\n                        Generator\r\n                    </h2>\r\n                    <playground>\r\n                        <code dangerouslySetInnerHTML={{ __html: examples[0] }}>\r\n                        </code>\r\n                        <compiled>\r\n                            {<JOFGENGenerator json={this.state.json} />}\r\n                        </compiled>\r\n                    </playground>\r\n                </section>\r\n\r\n                <section id=\"properties\">\r\n                    <h3>\r\n                        Properties\r\n                    </h3>\r\n                    <playground>\r\n                        <code className=\"norm-border-radius\" dangerouslySetInnerHTML={{ __html: codePreprocess(generatorProps) }}>\r\n                        </code>\r\n                    </playground>\r\n                </section>\r\n                <section id=\"parameters\">\r\n                    <h3>\r\n                        Parameters\r\n                    </h3>\r\n                    <p>\r\n                        Component <classcmd>JOFGENGenerator</classcmd> has several parameters and functions. The most important and most frequently used parameters are <prm>json</prm>\r\n                        , <prm>value</prm> and <prm>mode</prm>.\r\n                    </p>\r\n\r\n                    <h4 id=\"parameter-json\">\r\n                        json\r\n                    </h4>\r\n                    <p>\r\n                        This is the most important parameter, because it stores informations about all form elements\r\n                        (like unique ids, names and descriptions, error messages, etc.).\r\n                        It's used for generating form and may be generated by component <classcmd>JOFGENDesigner</classcmd>, generate it using playground\r\n                        (<a href={`${local_urls[\"version_prefix_router\"]}/playground`}>here</a>) or write it by yourself using <a href={`${local_urls[\"version_prefix_router\"]}/codesheet`}>guide</a>.<br />\r\n                        Rules applied during JSON object creation depends on selected <prm>mode</prm>.\r\n                        <Alert color=\"warning\" className=\"mt-3 mb-4\">\r\n                            <div className=\"pt-1 pb-2\">\r\n                                <b><Icon path={mdiAlertRhombus} size={0.9} color=\"#f3a000\" className=\"mr-1 mb-1\" /> Compatibility between modes:</b><br />\r\n                                Compatibility of object created in designer with generator.\r\n                            </div>\r\n                            <Table bordered>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td colSpan=\"2\" rowSpan=\"2\" className=\"no-border\" ></td>\r\n                                        <td colSpan=\"3\" className=\"text-center table-lvl-1\">\r\n                                            <b>\r\n                                                Generator mode\r\n                                            </b>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr className=\"table-lvl-2\">\r\n                                        <td className=\"text-center\">\r\n                                            linear\r\n                                            </td>\r\n                                        <td className=\"text-center\">\r\n                                            linear_merge\r\n                                            </td>\r\n                                        <td className=\"text-center\">\r\n                                            tree\r\n                                            </td>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td rowSpan=\"3\" className=\"text-center vertical-center table-lvl-1\">\r\n                                            <b>\r\n                                                Designer mode\r\n                                            </b>\r\n                                        </td>\r\n                                        <td className=\"text-center table-lvl-2\">linear</td>\r\n                                        <td className=\"text-center\"><Icon path={mdiCheckCircle} size={0.9} color=\"#8bc34a\" className=\"mr-1 mb-1\" /></td>\r\n                                        <td className=\"text-center\"><Icon path={mdiCheckCircle} size={0.9} color=\"#8bc34a\" className=\"mr-1 mb-1\" /></td>\r\n                                        <td className=\"text-center\"><Icon path={mdiCheckCircle} size={0.9} color=\"#8bc34a\" className=\"mr-1 mb-1\" /></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"text-center table-lvl-2\">linear_merge</td>\r\n                                        <td className=\"text-center\"><Icon path={mdiCircleHalf} size={0.9} color=\"#ffeb3b\" className=\"mr-1 mb-1\" /></td>\r\n                                        <td className=\"text-center\"><Icon path={mdiCheckCircle} size={0.9} color=\"#8bc34a\" className=\"mr-1 mb-1\" /></td>\r\n                                        <td className=\"text-center\"><Icon path={mdiCheckCircle} size={0.9} color=\"#8bc34a\" className=\"mr-1 mb-1\" /></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"text-center table-lvl-2\">tree</td>\r\n                                        <td className=\"text-center\"><Icon path={mdiCircleHalf} size={0.9} color=\"#ffeb3b\" className=\"mr-1 mb-1\" /></td>\r\n                                        <td className=\"text-center\"><Icon path={mdiCheckCircle} size={0.9} color=\"#8bc34a\" className=\"mr-1 mb-1\" /></td>\r\n                                        <td className=\"text-center\"><Icon path={mdiCheckCircle} size={0.9} color=\"#8bc34a\" className=\"mr-1 mb-1\" /></td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </Table>\r\n                            <div style={{ color: \"#777777\" }}>\r\n                                <Icon path={mdiCheckCircle} size={0.9} color=\"#8bc34a\" className=\"mr-1 mb-1\" /> - fully compatible (always generated without errors)<br />\r\n                                <Icon path={mdiCircleHalf} size={0.9} color=\"#ffeb3b\" className=\"mr-1 mb-1\" /> -  error occurs in some cases (sometimes may be generated with errors)<br />\r\n                                <Icon path={mdiCloseCircle} size={0.9} color=\"#f44336\" className=\"mr-1 mb-1\" /> - error occurs in all cases (always generated with error)<br />\r\n                            </div>\r\n\r\n                        </Alert>\r\n\r\n                    </p>\r\n\r\n                    <h4 id=\"parameter-mode\">\r\n                        mode\r\n                    </h4>\r\n                    <p>\r\n                        One of the key parameters is also mode. It is set to <string>'linear'</string> by default. Using this parameter you can change\r\n                        structure of value object. Changing value of this parameter will affect validity of <prm>json</prm>, because each\r\n                        mode uses its own validation logic during checking the uniqueness of the id.<br />\r\n                        As first example <prm>json</prm> we will use this simple object:\r\n                        <playground>\r\n                            <code dangerouslySetInnerHTML={{ __html: `<cmd>const</cmd> <prm>json</prm> = [\\n    {\\n        \"uid\": \"parent\",\\n        \"name\": \"Parent\",\\n        \"type\": \"sec\",\\n        \"sub\": [\\n            {\\n                \"uid\": \"sub\",\\n                \"name\": \"Sub\",\\n                \"type\": \"sec\",\\n                \"sub\": [\\n                    {\\n                        \"uid\": \"unicorn\",\\n                        \"name\": \"unicorn\",\\n                        \"value\": \"#ffffff\",\\n                        \"type\": \"color\"\\n                    }\\n                ]\\n            }\\n        ]\\n    },\\n    {\\n        \"uid\": \"parent1\",\\n        \"name\": \"Parent1\",\\n        \"type\": \"sec\",\\n        \"sub\": [\\n            {\\n                \"uid\": \"sub1\",\\n                \"name\": \"Sub1\",\\n                \"type\": \"sec\",\\n                \"sub\": [\\n                    {\\n                        \"uid\": \"dragon\",\\n                        \"name\": \"dragon\",\\n                        \"value\": \"#ffffff\",\\n                        \"type\": \"color\"\\n                    }\\n                ]\\n            }\\n        ]\\n    }\\n]` }}>\r\n                            </code>\r\n                        </playground>\r\n\r\n                        Value returned after filling form will be:\r\n                        <ul>\r\n                            <li>\r\n                                <b><string>'linear'</string></b><br />\r\n                                <playground>\r\n                                    <code className=\"norm-border-radius\" dangerouslySetInnerHTML={{\r\n                                        __html: `{\\n    <string>'unicorn'</string>: <string>'#ffffff'</string>\\n    <string>'dragon'</string>: <string>'#ffffff'</string>\\n}`\r\n                                    }}>\r\n                                    </code>\r\n                                </playground>\r\n                                Let's try to change <prm>uid</prm> from <string>'dragon'</string> to <string>'unicorn'</string>. Form will generate error alert as you can see here:\r\n                                <playground>\r\n                                    <code dangerouslySetInnerHTML={{\r\n                                        __html: `<<classcmd>JOFGENGenerator</classcmd> mode=<string>'linear'</string> json={this.state.json} />`\r\n                                    }}>\r\n                                    </code>\r\n                                    <compiled className=\"norm-border-radius\">\r\n                                        <JOFGENGenerator mode=\"linear\" json={[{ \"uid\": \"parent\", \"name\": \"Parent\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"sub\", \"name\": \"Sub\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"unicorn\", \"name\": \"unicorn\", \"value\": \"#ffffff\", \"type\": \"color\" }] }] }, { \"uid\": \"parent1\", \"name\": \"Parent1\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"sub1\", \"name\": \"Sub1\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"unicorn\", \"name\": \"unicorn\", \"value\": \"#ffffff\", \"type\": \"color\" }] }] }]} />\r\n                                    </compiled>\r\n                                </playground>\r\n                                \r\n                                Let's try to change <prm>uid</prm> from <string>'dragon'</string> to <string>'unicorn'</string>. Generator will show error alert. \r\n                                Because filling this form, may cause data loss or data corruption in some cases.<br />\r\n                                <playground>\r\n                                    <code className=\"norm-border-radius\" dangerouslySetInnerHTML={{\r\n                                        __html: `{\\n    <string class='text-primary'>'unicorn'</string>: <string class='text-primary'>'#ffffff'</string>,\\n    <string class='text-danger'>'unicorn'</string>: <string class='text-danger'>'#000000'</string>\\n}`\r\n                                    }}>\r\n                                    </code>\r\n                                </playground>\r\n                                <Alert color=\"danger\">\r\n                                    <b><Icon path={mdiAlertCircle} size={0.9} color=\"#ff5252\" className=\"mr-1 mb-1\" /> Data loss</b>\r\n                                    <div>As you can see: value will be set to value from last changed input with this id, so another value will be lost.</div>\r\n                                </Alert>\r\n                                We can make this example little bit more special by changing the <prm>type</prm> of one variable from <string>'color'</string> to for example: <string>'integer'</string>.\r\n                                There we can see data corruption and data loss in one case, which can affect your application.            \r\n                                <playground>\r\n                                    <code className=\"norm-border-radius\" dangerouslySetInnerHTML={{\r\n                                        __html: `{\\n    <string class='text-primary'>'unicorn'</string>: <string class='text-primary'>'#ffffff'</string>,\\n    <string class='text-danger'>'unicorn'</string>: <val class='text-danger'>32</val>\\n}`\r\n                                    }}>\r\n                                    </code>\r\n                                </playground>\r\n                                <Alert color=\"danger\">\r\n                                    <b><Icon path={mdiAlertCircle} size={0.9} color=\"#ff5252\" className=\"mr-1 mb-1\" /> Data loss and data corruption</b>\r\n                                    <div>\r\n                                        As you can see in this case, value will be set to value from last changed input with this id, so another value will be lost - like in previous example. \r\n                                        But there is also another problem - conflict of data types.\r\n                                    </div>\r\n                                </Alert>\r\n                            </li>\r\n                            <li>\r\n                                <b><string>'linear_merge'</string></b><br />\r\n                                <playground>\r\n                                    <code className=\"norm-border-radius\" dangerouslySetInnerHTML={{\r\n                                        __html: `{\\n    <string>'parent:sub:unicorn'</string>: <string>'#ffffff'</string>\\n    <string>'parent1:sub1:dragon'</string>: <string>'#ffffff'</string>\\n}`\r\n                                    }}>\r\n                                    </code>\r\n                                </playground>\r\n                                Let's try to change <prm>uid</prm> from <string>'dragon'</string> to <string>'unicorn'</string>. Form will be generated without errors, because keys of values will be different (unique). \r\n                                We can see result here:\r\n                                <playground>\r\n                                    <code dangerouslySetInnerHTML={{\r\n                                        __html: `<<classcmd>JOFGENGenerator</classcmd> mode=<string>'linear_merge'</string> json={this.state.json} />`\r\n                                    }}>\r\n                                    </code>\r\n                                    <compiled className=\"norm-border-radius\">\r\n                                        <JOFGENGenerator mode=\"linear_merge\" json={[{ \"uid\": \"parent\", \"name\": \"Parent\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"sub\", \"name\": \"Sub\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"unicorn\", \"name\": \"unicorn\", \"value\": \"#ffffff\", \"type\": \"color\" }] }] }, { \"uid\": \"parent1\", \"name\": \"Parent1\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"sub1\", \"name\": \"Sub1\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"unicorn\", \"name\": \"unicorn\", \"value\": \"#ffffff\", \"type\": \"color\" }] }] }]} />\r\n                                    </compiled>\r\n                                </playground>\r\n                            </li>\r\n                            <li>\r\n                                <b><string>'tree'</string></b><br />\r\n                                Let's try to change <prm>uid</prm> from <string>'dragon'</string> to <string>'unicorn'</string>. Form will be generated without errors, because keys of values will be different (unique)\r\n                                like in previous case. We can see result here:\r\n                                <playground>\r\n                                    <code className=\"norm-border-radius\" dangerouslySetInnerHTML={{\r\n                                        __html: `{\\n    <string>'parent'</string>: {\\n        <string>'sub'</string>: {\\n            <string>'unicorn'</string>: <string>'#ffffff'</string>\\n        }\\n    },\\n    <string>'parent1'</string>: {\\n        <string>'sub1'</string>: {\\n            <string>'dragon'</string>: <string>'#ffffff'</string>\\n        }\\n    }\\n}`\r\n                                    }}>\r\n                                    </code>\r\n                                </playground>\r\n                                As we can see: result object copies structure of input parameter <prm>json</prm>.<br />\r\n                                Let's try to change <prm>uid</prm> from <string>'dragon'</string> to <string>'unicorn'</string>. Form will be generated without errors. We can see result here:\r\n                                because keys of values will be different.\r\n                                <playground>\r\n                                    <code dangerouslySetInnerHTML={{\r\n                                        __html: `<<classcmd>JOFGENGenerator</classcmd> mode=<string>'tree'</string> json={this.state.json} />`\r\n                                    }}>\r\n                                    </code>\r\n                                    <compiled className=\"norm-border-radius\">\r\n                                        <JOFGENGenerator mode=\"tree\" json={[{ \"uid\": \"parent\", \"name\": \"Parent\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"sub\", \"name\": \"Sub\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"unicorn\", \"name\": \"unicorn\", \"value\": \"#ffffff\", \"type\": \"color\" }] }] }, { \"uid\": \"parent1\", \"name\": \"Parent1\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"sub1\", \"name\": \"Sub1\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"unicorn\", \"name\": \"unicorn\", \"value\": \"#ffffff\", \"type\": \"color\" }] }] }]} />\r\n                                    </compiled>\r\n                                </playground>\r\n                            </li>\r\n                        </ul>\r\n                    </p>\r\n\r\n                    <h4 id=\"parameter-req_indicator\">\r\n                        req_indicator\r\n                    </h4>\r\n                    <p>\r\n                        Value of this parameter is by default <prm>req_indicator</prm> = <string>{`'*'`}</string>. Value of this parameter is showed next to label of each required parameter.\r\n                    </p>\r\n\r\n                    <h4 id=\"parameter-sep\">\r\n                        sep\r\n                    </h4>\r\n                    <p>\r\n                        This parameter is used only when <prm>mode</prm> is set to <string>linear_merge</string>. It separates unique ids during id merging\r\n                        names between different levels. For example, if <prm>sep</prm> = <string>{`'->'`}</string>:\r\n                        <playground>\r\n                            <code dangerouslySetInnerHTML={{ __html: `[\\n    {\\n        \"uid\": \"parent\",\\n        \"name\": \"Parent\",\\n        \"type\": \"sec\",\\n        \"sub\": [\\n            {\\n                \"uid\": \"sub\",\\n                \"name\": \"Sub\",\\n                \"type\": \"sec\",\\n                \"sub\": [\\n                    {\\n                        \"uid\": \"unicorn\",\\n                        \"name\": \"unicorn\",\\n                        \"value\": \"#ffffff\",\\n                        \"type\": \"color\"\\n                    }\\n                ]\\n            }\\n        ]\\n    }\\n]` }}>\r\n                            </code>\r\n                            <compiled className=\"norm-border-radius\">\r\n                                <JOFGENGenerator json={[{ \"uid\": \"parent\", \"name\": \"Parent\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"sub\", \"name\": \"Sub\", \"type\": \"sec\", \"sub\": [{ \"uid\": \"unicorn\", \"name\": \"unicorn\", \"value\": \"#ffffff\", \"type\": \"color\" }] }] }]} />\r\n                            </compiled>\r\n                        </playground>\r\n\r\n                        Returned value during filling this form will be:\r\n                        <playground>\r\n                            <code className=\"norm-border-radius\" dangerouslySetInnerHTML={{\r\n                                __html: `{\\n    <string>'parent->sub->unicorn'</string>: <string>'#ffffff'</string>\\n}`\r\n                            }}>\r\n                            </code>\r\n                        </playground>\r\n                    </p>\r\n\r\n\r\n                    <h4 id=\"parameter-size\">\r\n                        size\r\n                    </h4>\r\n                    <p>\r\n                        Size of text, inputs, dropdowns and buttons. Value of this parameter can be <string>'sm'</string> or <string>'lg'</string>.\r\n                    </p>\r\n\r\n                    <h4 id=\"parameter-sm\">\r\n                        sm\r\n                    </h4>\r\n                    <p>\r\n                        Global size of element component. Value of this parameter is used if value <prm>sm</prm> is not defined for concrete element.\r\n                    </p>\r\n\r\n                    <h4 id=\"parameter-value\">\r\n                        value\r\n                    </h4>\r\n                    <p>\r\n                        This parameter was added for cases when you need to load form with data filled by user. For example, if you stores values from form in database and want to reload it.\r\n                        Object can have different structure depending on selected <prm>mode</prm>.\r\n                    </p>\r\n\r\n                </section>\r\n                <section id=\"methods\">\r\n                    <h3>\r\n                        Methods\r\n                    </h3>\r\n\r\n                    <h4 id=\"parameter-json\">\r\n                        onChange(value, valid)\r\n                    </h4>\r\n                    <p>\r\n                        Method takes parameter <prm>value</prm>, which represents current state of values (input forms). Value of <prm>value</prm> depends on selected <prm>mode</prm> and\r\n                        parameter <prm>json</prm>, that declares structure of generated form. Second parameter <prm>valid</prm> is <string>true</string>, if returned <prm>value</prm> is\r\n                        valid, otherwise value of <prm>valid</prm> will be <string>false</string>.\r\n                    </p>\r\n\r\n                    <h4 id=\"parameter-value\">\r\n                        isValid(valid)\r\n                    </h4>\r\n                    <p>\r\n                        This method returns <string>true</string>, if all values in generated form are valid, otherwise value of <prm>valid</prm> will be <string>false</string>.\r\n                    </p>\r\n                </section>\r\n            </Fragment>\r\n        );\r\n\r\n    }\r\n}","import React from 'react';\r\n\r\nexport const codePreprocess = function(txt)\r\n{\r\n    return txt.replaceAll(\"PropTypes\", \"<props>PropTypes</props>\")\r\n              .replaceAll(\"func\", \"<primpt>func</primpt>\")\r\n              .replaceAll(\"object\", \"<primpt>object</primpt>\")\r\n              .replaceAll(\"string\", \"<primpt>string</primpt>\")\r\n              .replaceAll(\"number\", \"<primpt>number</primpt>\")\r\n              .replaceAll(\"any\", \"<objpt>any</objpt>\")\r\n              .replaceAll(\"shape\", \"<objpt>shape</objpt>\")\r\n              .replaceAll(\"oneOf\", \"<objpt>oneOf</objpt>\")\r\n              .replaceAll(\"array\", \"<objpt>array</objpt>\")\r\n              .replaceAll(\"\\\",\", \"'</string>,\")\r\n              .replaceAll(\"\\\"]\", \"'</string>]\")\r\n              .replaceAll(\"\\\"\", \"<string>'\");\r\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nimport Fade from './Fade';\nvar propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeClassName: PropTypes.string,\n  closeAriaLabel: PropTypes.string,\n  cssModule: PropTypes.object,\n  color: PropTypes.string,\n  fade: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  tag: tagPropType,\n  transition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  color: 'success',\n  isOpen: true,\n  tag: 'div',\n  closeAriaLabel: 'Close',\n  fade: true,\n  transition: _objectSpread2({}, Fade.defaultProps, {\n    unmountOnExit: true\n  })\n};\n\nfunction Alert(props) {\n  var className = props.className,\n      closeClassName = props.closeClassName,\n      closeAriaLabel = props.closeAriaLabel,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      color = props.color,\n      isOpen = props.isOpen,\n      toggle = props.toggle,\n      children = props.children,\n      transition = props.transition,\n      fade = props.fade,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"closeClassName\", \"closeAriaLabel\", \"cssModule\", \"tag\", \"color\", \"isOpen\", \"toggle\", \"children\", \"transition\", \"fade\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'alert', \"alert-\" + color, {\n    'alert-dismissible': toggle\n  }), cssModule);\n  var closeClasses = mapToCssModules(classNames('close', closeClassName), cssModule);\n\n  var alertTransition = _objectSpread2({}, Fade.defaultProps, {}, transition, {\n    baseClass: fade ? transition.baseClass : '',\n    timeout: fade ? transition.timeout : 0\n  });\n\n  return React.createElement(Fade, _extends({}, attributes, alertTransition, {\n    tag: Tag,\n    className: classes,\n    in: isOpen,\n    role: \"alert\",\n    innerRef: innerRef\n  }), toggle ? React.createElement(\"button\", {\n    type: \"button\",\n    className: closeClasses,\n    \"aria-label\": closeAriaLabel,\n    onClick: toggle\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\")) : null, children);\n}\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport default Alert;"],"sourceRoot":""}